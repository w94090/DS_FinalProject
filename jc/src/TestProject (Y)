import java.io.BufferedReader;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;





/**
 * Servlet implementation class TestProject
 */
@WebServlet("/TestProject")
public class TestProject extends HttpServlet {
	private static final long serialVersionUID = 1L;
    /**
     * @see HttpServlet#HttpServlet()
     */
    public TestProject() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.setCharacterEncoding("UTF-8");
		request.setCharacterEncoding("UTF-8");
		response.setContentType("text/html");
		if(request.getParameter("keyword")== null) {
			String requestUri = request.getRequestURI();
			request.setAttribute("requestUri", requestUri);
			request.getRequestDispatcher("Search.jsp").forward(request, response);
			return;
		}
		// 關鍵字我設在這裡
		ArrayList<Keyword> keyword = new ArrayList<Keyword>();
		Keyword k = new Keyword("finance", 10);
		Keyword k2 = new Keyword("stock", 10);
		Keyword k3 = new Keyword("bloomberg",10);
		
		keyword.add(k);
		keyword.add(k2);
		keyword.add(k3);
		
		
		System.out.println("我還是愛你"+request.getParameter("keyword"));
		GoogleQuery google = new GoogleQuery(request.getParameter("keyword"));
		WebPage rootPage = new WebPage(google.url, "google search");
		WebTree tree =new WebTree(rootPage);
		
		
		
		
		HashMap<String, String> query = google.query();
		String[][] s = new String[query.size()][2];
		request.setAttribute("query", s);
		int num = 0;
		for(Entry<String, String> entry : query.entrySet()) {
		   
		    String value = entry.getValue();
		    WebPage Pager = null;
		    WebNode child =null;
		    //System.out.println(value+"");
		    URL url;
		    try {
		    	 if(value.contains("map")) {
					    url = new URL(value);
				    }
				    else if(value.contains("mof")) {
				    	url=new URL("https://www.google.com.tw/");
				    }
				    else if (value.contains("search")&&value.contains("google")) {
				    	url=new URL(value);
				    }
				    else if(value.contains("books")) {
				    	url=new URL(value);
				    }
				    else {
					    url = new URL("https://www.google.com.tw/"+value);
				    }
				    Pager = new WebPage(url+"", entry.getKey());
				    child = new WebNode(Pager);
				    tree.root.addChild(child);
		    }catch(Exception e) {
		    	System.out.println("haha");
		    }
		   
		    
		    ChildQuery childr = new ChildQuery(Pager.url);
		    ArrayList<String> children = childr.query();
		    int index=0;
		    for(int i=0; i<5;i++) { //他會跑前5個子網頁的超連結
		    	try {
		    		
		    		if(children.get(i).contains("linkedin")) {
		    			System.out.println("抓到你了");
		    		}else if(children.get(i).contains("cdibh")) {
		    			System.out.println("還趕躲阿");
		    		}else {
		    			GrandChildQuery grandch = new GrandChildQuery(children.get(i));
				    	ArrayList<String> grandch2 = grandch.query();
				    	double num2 = StringCounter(grandch2.get(index),keyword);
				    	Pager.score+=num2; //把子網頁內文全部加進去母網頁的分數
		    		}
		    		
			    	index++;
		    	}catch(Exception e) {
		    		System.out.println("給我跑到這喔");
		    		//遇到網頁有問題沒辦法爬的時候就會到這
		    	}
		    /*	catch (IndexOutOfBoundsException e) {
					// TODO: handle exception
		    		System.out.println("愛探險的Dora");
				}**/
		    }
		    //下方是算母網頁內文的分數 ( 而此時母網頁已經有子網頁的分數加乘了 )
		    Pager.setScore(keyword);
			tree.setPostOrderScore(keyword);
			System.out.println(Pager.score);
		}
		for(Entry<String,String> enry : query.entrySet()) {
			//這個就是跑上去讓它顯示，並且也排列過了
			s[num][0] = tree.root.children.get(num).webPage.name;
		    s[num][1] = tree.root.children.get(num).webPage.url;
		    
		    num++;
		}
		request.getRequestDispatcher("googleitem.jsp")
		 .forward(request, response); 
		
	}
	
	public double StringCounter (String url4,ArrayList<Keyword> kl) {
		//這裡要寫算字串裡有出現多少關鍵字
		//To do a case-insensitive search, we turn the whole content and keyword into upper-case:
		int retVal=0;
		for(Keyword k: kl) {
			String u = null;
			url4 = url4.toUpperCase();
			u = k.name.toUpperCase();
			
			
			int fromIdx = 0;
			int found = -1;
		
			while ((found = url4.indexOf(u, fromIdx)) != -1){
			    retVal=retVal+1;
			    fromIdx = found + u.length();
			}
		}
		
	
		return retVal;
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
